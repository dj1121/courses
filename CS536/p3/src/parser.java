
//----------------------------------------------------
// The following code was generated by CUP v0.11b ${cupversion} (SVN rev )
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b ${cupversion} (SVN rev ) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\010\004\000\002\010\002\000" +
    "\002\005\005\000\002\005\006\000\002\011\006\000\002" +
    "\012\010\000\002\013\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\004\000\002\017\006\000\002\020\004\000" +
    "\002\020\002\000\002\021\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\006\000\002\021\006\000\002\021" +
    "\012\000\002\021\017\000\002\021\012\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\006\000\002\026\003\000" +
    "\002\026\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\027\003\000\002\027\005\000\002\007" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\011" +
    "\ufffe\001\002\000\014\002\000\004\010\005\011\006\013" +
    "\011\012\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\011\ufffd\001\002\000\004\021\uffc3\001\002\000\004\021" +
    "\uffc2\001\002\000\004\021\020\001\002\000\004\021\uffc1" +
    "\001\002\000\004\021\020\001\002\000\014\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\011\uffff\001\002\000\014\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\011\ufffc\001\002\000\014\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\001\002\000\056" +
    "\021\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\001\002\000\006\026\024\030\022" +
    "\001\002\000\032\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\020\ufff8\021\ufff8" +
    "\025\ufff8\001\002\000\004\024\035\001\002\000\012\004" +
    "\010\005\011\006\013\027\025\001\002\000\004\024\ufff2" +
    "\001\002\000\004\021\020\001\002\000\004\027\033\001" +
    "\002\000\006\027\ufff0\031\031\001\002\000\010\004\010" +
    "\005\011\006\013\001\002\000\004\027\uffef\001\002\000" +
    "\004\024\ufff1\001\002\000\006\027\uffee\031\uffee\001\002" +
    "\000\030\004\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\020\ufff9\021\ufff9\025\ufff9\001\002" +
    "\000\014\002\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6\001" +
    "\002\000\030\004\010\005\011\006\013\011\041\012\uffeb" +
    "\013\uffeb\014\uffeb\016\uffeb\020\uffeb\021\uffeb\025\uffeb\001" +
    "\002\000\004\021\020\001\002\000\004\021\020\001\002" +
    "\000\020\012\055\013\047\014\051\016\044\020\056\021" +
    "\020\025\053\001\002\000\030\004\ufffa\005\ufffa\006\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\020\ufffa\021" +
    "\ufffa\025\ufffa\001\002\000\004\026\175\001\002\000\052" +
    "\026\166\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\001\002\000\020\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\020\uffec\021\uffec\025\uffec\001\002\000\004\033\163\001" +
    "\002\000\012\032\127\035\160\036\157\054\130\001\002" +
    "\000\004\026\143\001\002\000\004\030\142\001\002\000" +
    "\014\002\uffed\004\uffed\005\uffed\006\uffed\011\uffed\001\002" +
    "\000\004\030\141\001\002\000\004\034\135\001\002\000" +
    "\024\007\061\010\065\021\020\022\073\023\067\026\072" +
    "\030\066\040\057\043\071\001\002\000\022\007\061\010" +
    "\065\021\020\022\073\023\067\026\072\040\057\043\071" +
    "\001\002\000\040\027\uffcf\030\uffcf\031\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\040\027" +
    "\uffcb\030\uffcb\031\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\034\030\133\037\104\040\076" +
    "\041\107\042\077\044\075\045\111\046\110\047\100\050" +
    "\105\051\102\052\101\053\103\001\002\000\044\027\uffce" +
    "\030\uffce\031\uffce\032\127\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\130\001\002\000\040\027\uffde\030" +
    "\uffde\031\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\001\002\000\040\027\uffca\030\uffca\031\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\020" +
    "\012\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\021\uffe1\025" +
    "\uffe1\001\002\000\040\027\uffcc\030\uffcc\031\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000\040" +
    "\027\uffc8\030\uffc8\031\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\001\002\000\022\007\061\010\065\021" +
    "\020\022\073\023\067\026\072\040\057\043\071\001\002" +
    "\000\022\007\061\010\065\021\020\022\073\023\067\026" +
    "\072\040\057\043\071\001\002\000\040\027\uffcd\030\uffcd" +
    "\031\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\001\002\000\034\027\106\037\104\040\076\041\107\042" +
    "\077\044\075\045\111\046\110\047\100\050\105\051\102" +
    "\052\101\053\103\001\002\000\022\007\061\010\065\021" +
    "\020\022\073\023\067\026\072\040\057\043\071\001\002" +
    "\000\022\007\061\010\065\021\020\022\073\023\067\026" +
    "\072\040\057\043\071\001\002\000\022\007\061\010\065" +
    "\021\020\022\073\023\067\026\072\040\057\043\071\001" +
    "\002\000\022\007\061\010\065\021\020\022\073\023\067" +
    "\026\072\040\057\043\071\001\002\000\022\007\061\010" +
    "\065\021\020\022\073\023\067\026\072\040\057\043\071" +
    "\001\002\000\022\007\061\010\065\021\020\022\073\023" +
    "\067\026\072\040\057\043\071\001\002\000\022\007\061" +
    "\010\065\021\020\022\073\023\067\026\072\040\057\043" +
    "\071\001\002\000\022\007\061\010\065\021\020\022\073" +
    "\023\067\026\072\040\057\043\071\001\002\000\022\007" +
    "\061\010\065\021\020\022\073\023\067\026\072\040\057" +
    "\043\071\001\002\000\040\027\uffc9\030\uffc9\031\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000" +
    "\022\007\061\010\065\021\020\022\073\023\067\026\072" +
    "\040\057\043\071\001\002\000\022\007\061\010\065\021" +
    "\020\022\073\023\067\026\072\040\057\043\071\001\002" +
    "\000\022\007\061\010\065\021\020\022\073\023\067\026" +
    "\072\040\057\043\071\001\002\000\040\027\uffd7\030\uffd7" +
    "\031\uffd7\037\104\040\076\041\107\042\077\044\075\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\001\002\000\024\027\uffd6\030\uffd6\031\uffd6\037\104\040" +
    "\076\041\107\042\077\044\075\045\111\001\002\000\040" +
    "\027\uffdb\030\uffdb\031\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\024\027\uffd4\030\uffd4\031" +
    "\uffd4\037\104\040\076\041\107\042\077\044\075\045\111" +
    "\001\002\000\040\027\uffdd\030\uffdd\031\uffdd\037\uffdd\040" +
    "\uffdd\041\107\042\077\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000\024\027" +
    "\uffd1\030\uffd1\031\uffd1\037\104\040\076\041\107\042\077" +
    "\044\075\045\111\001\002\000\024\027\uffd3\030\uffd3\031" +
    "\uffd3\037\104\040\076\041\107\042\077\044\075\045\111" +
    "\001\002\000\024\027\uffd2\030\uffd2\031\uffd2\037\104\040" +
    "\076\041\107\042\077\044\075\045\111\001\002\000\024" +
    "\027\uffd5\030\uffd5\031\uffd5\037\104\040\076\041\107\042" +
    "\077\044\075\045\111\001\002\000\040\027\uffda\030\uffda" +
    "\031\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\001\002\000\040\027\uffdc\030\uffdc\031\uffdc\037\uffdc\040" +
    "\uffdc\041\107\042\077\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\040\027" +
    "\uffd8\030\uffd8\031\uffd8\037\104\040\076\041\107\042\077" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\001\002\000\040\027\uffd9\030\uffd9\031\uffd9" +
    "\037\104\040\076\041\107\042\077\044\075\045\111\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002" +
    "\000\004\021\020\001\002\000\022\007\061\010\065\021" +
    "\020\022\073\023\067\026\072\040\057\043\071\001\002" +
    "\000\040\027\uffdf\030\uffdf\031\uffdf\037\104\040\076\041" +
    "\107\042\077\044\075\045\111\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\001\002\000\050\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001\002\000\020" +
    "\012\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2\025" +
    "\uffe2\001\002\000\040\027\uffd0\030\uffd0\031\uffd0\037\uffd0" +
    "\040\uffd0\041\107\042\077\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002\000\004" +
    "\021\020\001\002\000\006\030\140\032\127\001\002\000" +
    "\006\030\uffc0\032\uffc0\001\002\000\020\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\020\uffe7\021\uffe7\025\uffe7\001\002\000" +
    "\020\012\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0\021\uffe0" +
    "\025\uffe0\001\002\000\020\012\uffea\013\uffea\014\uffea\016" +
    "\uffea\020\uffea\021\uffea\025\uffea\001\002\000\022\007\061" +
    "\010\065\021\020\022\073\023\067\026\072\040\057\043" +
    "\071\001\002\000\034\027\145\037\104\040\076\041\107" +
    "\042\077\044\075\045\111\046\110\047\100\050\105\051" +
    "\102\052\101\053\103\001\002\000\004\024\146\001\002" +
    "\000\030\004\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\020\ufff9\021\ufff9\025\ufff9\001\002" +
    "\000\030\004\010\005\011\006\013\011\041\012\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\020\uffeb\021\uffeb\025\uffeb\001\002" +
    "\000\020\012\055\013\047\014\051\016\044\020\056\021" +
    "\020\025\151\001\002\000\022\012\uffe5\013\uffe5\014\uffe5" +
    "\015\152\016\uffe5\020\uffe5\021\uffe5\025\uffe5\001\002\000" +
    "\004\024\153\001\002\000\030\004\ufff9\005\ufff9\006\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\025\ufff9\001\002\000\030\004\010\005\011\006\013" +
    "\011\041\012\uffeb\013\uffeb\014\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\025\uffeb\001\002\000\020\012\055\013\047\014\051" +
    "\016\044\020\056\021\020\025\156\001\002\000\020\012" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\021\uffe4\025\uffe4" +
    "\001\002\000\004\030\162\001\002\000\004\030\161\001" +
    "\002\000\020\012\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9" +
    "\021\uffe9\025\uffe9\001\002\000\020\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\025\uffe8\001\002\000\022" +
    "\007\061\010\065\021\020\022\073\023\067\026\072\040" +
    "\057\043\071\001\002\000\034\030\165\037\104\040\076" +
    "\041\107\042\077\044\075\045\111\046\110\047\100\050" +
    "\105\051\102\052\101\053\103\001\002\000\020\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\020\uffe6\021\uffe6\025\uffe6\001" +
    "\002\000\024\007\061\010\065\021\020\022\073\023\067" +
    "\026\072\027\171\040\057\043\071\001\002\000\036\027" +
    "\uffc5\031\uffc5\037\104\040\076\041\107\042\077\044\075" +
    "\045\111\046\110\047\100\050\105\051\102\052\101\053" +
    "\103\001\002\000\006\027\173\031\172\001\002\000\040" +
    "\027\uffc7\030\uffc7\031\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\001\002\000\022\007\061\010\065\021" +
    "\020\022\073\023\067\026\072\040\057\043\071\001\002" +
    "\000\040\027\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\001\002\000\036\027\uffc4\031" +
    "\uffc4\037\104\040\076\041\107\042\077\044\075\045\111" +
    "\046\110\047\100\050\105\051\102\052\101\053\103\001" +
    "\002\000\022\007\061\010\065\021\020\022\073\023\067" +
    "\026\072\040\057\043\071\001\002\000\034\027\177\037" +
    "\104\040\076\041\107\042\077\044\075\045\111\046\110" +
    "\047\100\050\105\051\102\052\101\053\103\001\002\000" +
    "\004\024\200\001\002\000\030\004\ufff9\005\ufff9\006\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\025\ufff9\001\002\000\030\004\010\005\011\006\013" +
    "\011\041\012\uffeb\013\uffeb\014\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\025\uffeb\001\002\000\020\012\055\013\047\014\051" +
    "\016\044\020\056\021\020\025\203\001\002\000\020\012" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3\021\uffe3\025\uffe3" +
    "\001\002\000\004\021\020\001\002\000\004\030\206\001" +
    "\002\000\032\002\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7\021\ufff7\025" +
    "\ufff7\001\002\000\004\030\022\001\002\000\006\021\020" +
    "\024\211\001\002\000\012\004\010\005\011\006\013\011" +
    "\041\001\002\000\014\004\ufff3\005\ufff3\006\ufff3\011\ufff3" +
    "\025\ufff3\001\002\000\014\004\010\005\011\006\013\011" +
    "\041\025\215\001\002\000\014\004\ufff4\005\ufff4\006\ufff4" +
    "\011\ufff4\025\ufff4\001\002\000\004\030\216\001\002\000" +
    "\014\002\ufff5\004\ufff5\005\ufff5\006\ufff5\011\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\004\003\003\001\001\000\014\004" +
    "\014\005\006\006\013\011\015\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\207\001\001\000\002" +
    "\001\001\000\004\007\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\022\001\001\000\002\001\001\000\004\017\035\001" +
    "\001\000\010\006\025\015\026\016\027\001\001\000\002" +
    "\001\001\000\004\007\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\025\015\031\016\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\036\001\001\000\002\001\001\000\010\005\042" +
    "\006\037\020\041\001\001\000\004\007\206\001\001\000" +
    "\004\007\203\001\001\000\014\007\044\021\045\022\051" +
    "\025\053\027\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\044\022\063\023\061\024\057\025\067\027\062\001" +
    "\001\000\016\007\044\022\063\023\133\024\057\025\067" +
    "\027\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\044\022\063\023\125\024\057\025\067" +
    "\027\062\001\001\000\016\007\044\022\063\023\073\024" +
    "\057\025\067\027\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\044\022\063\023\124\024\057\025" +
    "\067\027\062\001\001\000\016\007\044\022\063\023\123" +
    "\024\057\025\067\027\062\001\001\000\016\007\044\022" +
    "\063\023\122\024\057\025\067\027\062\001\001\000\016" +
    "\007\044\022\063\023\121\024\057\025\067\027\062\001" +
    "\001\000\016\007\044\022\063\023\120\024\057\025\067" +
    "\027\062\001\001\000\016\007\044\022\063\023\117\024" +
    "\057\025\067\027\062\001\001\000\016\007\044\022\063" +
    "\023\116\024\057\025\067\027\062\001\001\000\016\007" +
    "\044\022\063\023\115\024\057\025\067\027\062\001\001" +
    "\000\016\007\044\022\063\023\114\024\057\025\067\027" +
    "\062\001\001\000\002\001\001\000\016\007\044\022\063" +
    "\023\113\024\057\025\067\027\062\001\001\000\016\007" +
    "\044\022\063\023\112\024\057\025\067\027\062\001\001" +
    "\000\016\007\044\022\063\023\111\024\057\025\067\027" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\131\001\001\000\016\007\044" +
    "\022\063\023\130\024\057\025\067\027\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\136\027\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\044\022\063\023\143\024" +
    "\057\025\067\027\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\146\001\001\000\010\005\042\006" +
    "\037\020\147\001\001\000\014\007\044\021\045\022\051" +
    "\025\053\027\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\153\001\001\000\010\005\042\006\037" +
    "\020\154\001\001\000\014\007\044\021\045\022\051\025" +
    "\053\027\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\044\022\063\023\163\024\057\025\067\027\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\044\022\063\023\166\024\057\025\067\026\167\027\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\044\022\063\023\173\024\057\025\067" +
    "\027\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\044\022\063\023\175\024\057\025\067\027\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\200\001\001\000\010\005\042\006\037\020\201\001\001" +
    "\000\014\007\044\021\045\022\051\025\053\027\047\001" +
    "\001\000\002\001\001\000\004\007\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\204\001\001\000\010\005\211\006\037\013\212\001\001" +
    "\000\002\001\001\000\006\005\213\006\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(new DeclListNode(d));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d); RESULT = dl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              DeclNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= fnDecl 
            {
              DeclNode RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnDeclNode fn = (FnDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= structDecl 
            {
              DeclNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDeclNode s = (StructDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vdecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 v.addLast(vdecl);
                   RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDeclList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= type id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDecl ::= STRUCT id id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode t = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(new StructNode(t), i, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fnDecl ::= type id formals fnBody 
            {
              FnDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList f = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnBodyNode fn = (FnBodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FnDeclNode(t, i, new FormalsListNode(f), fn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              StructDeclNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StructDeclNode(i, new DeclListNode(s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // structBody ::= structBody varDecl 
            {
              LinkedList RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vd = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sb.addLast(vd);
                   RESULT = sb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structBody ::= varDecl 
            {
              LinkedList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vd = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<DeclNode> list = new LinkedList<DeclNode>();
                   list.addLast(vd);
                   RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formals ::= LPAREN RPAREN 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<FormalDeclNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formals ::= LPAREN formalsList RPAREN 
            {
              LinkedList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalsList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalDeclNode fd = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
                   list.addLast(fd);
                   RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDeclNode f = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fl.addFirst(f);
                   RESULT = fl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formalDecl ::= type id 
            {
              FormalDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalDeclNode(t, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FnBodyNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnBodyNode(new DeclListNode(v), new StmtListNode(s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtNode s = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.addLast(s);
                   RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<StmtNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= assignExp SEMICOLON 
            {
              StmtNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignNode as = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtNode(as);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode loc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostIncStmtNode(loc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode loc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostDecStmtNode(loc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= CIN READ loc SEMICOLON 
            {
              StmtNode RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode loc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStmtNode(loc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStmtNode(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmtNode(exp, new DeclListNode(v), new StmtListNode(s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList s1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmtNode(exp, new DeclListNode(v1), new StmtListNode(s1),
                        new DeclListNode(v2), new StmtListNode(s2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(exp, new DeclListNode(v), new StmtListNode(s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN SEMICOLON 
            {
              StmtNode RESULT =null;
		 RESULT = new ReturnStmtNode(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= fncall SEMICOLON 
            {
              StmtNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpNode f = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmtNode(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignExp ::= loc ASSIGN exp 
            {
              AssignNode RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode loc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignNode(loc, exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= assignExp 
            {
              ExpNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignNode as = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp PLUS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MINUS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp TIMES exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DIVIDE exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= NOT exp 
            {
              ExpNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotNode(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp AND exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp OR exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp EQUALS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp NOTEQUALS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp LESS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp GREATER exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp LESSEQ exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp GREATEREQ exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqNode(exp1, exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= MINUS exp 
            {
              ExpNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinusNode(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= term 
            {
              ExpNode RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode term = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = term;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= loc 
            {
              ExpNode RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode loc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= INTLITERAL 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= STRINGLITERAL 
            {
              ExpNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= TRUE 
            {
              ExpNode RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal tr = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TrueNode(tr.linenum, tr.charnum);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= FALSE 
            {
              ExpNode RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal fa = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FalseNode(fa.linenum, fa.charnum);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= LPAREN exp RPAREN 
            {
              ExpNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= fncall 
            {
              ExpNode RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpNode fn = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fncall ::= id LPAREN RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExpNode(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fncall ::= id LPAREN actualList RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExpNode(i, new ExpListNode(al));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // actualList ::= exp 
            {
              LinkedList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpNode> list = new LinkedList<ExpNode>();
                   list.addLast(exp);
                   RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.addLast(exp);
                   RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new IntNode();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new BoolNode();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= VOID 
            {
              TypeNode RESULT =null;
		 RESULT = new VoidNode();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loc ::= id 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loc ::= loc DOT id 
            {
              ExpNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode lc = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DotAccessExpNode(lc, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id ::= ID 
            {
              IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
