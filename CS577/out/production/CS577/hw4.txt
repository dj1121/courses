Devin Johnson
Benjamin Challe
CS 577 HW 4

-------------------
|     PART A      |
-------------------

This algorithm fails to produce the optimal result on the input: (0,3], (1,3.5], (1,3.5], (4,5], (3,5], (3,5]. 
The algorithm produces a result of 3 when the optimal result is 2.


-------------------
|     PART B      |
-------------------

Idea: This algorithm computes the minimum number of vists required to attend every lecture. We use a greedy solution namely
by using the idea of a "window". First we sort the events by increasing end time so the earliest end time will be
furthest left in our list. From there, we create a window which is itself an interval. The first window is simply
equal to A[0] (the interval with earliest end time) and the visit counter is incremented by 1. Every new window
means making another visit.

We then loop through all intervals (moving left to right graphically) in A and for each interval we check if it
overlaps with the current window. If there is overlap (not null), we update the window to become smaller and reflect
the exact overlap between the two times. We have attached an image clarifying this if it is not clear.

Once we reach an interval where the window would not become smaller, the window is reset on that interval and a counter for
visits is increased by 1. By doing this method, at each step we are quite simply choosing the minimum width possible for our window size, 
which makes our algorithm greedy. Since the intervals are sorted, we can be sure that we won't be cutting out possible times when
reducing the size of our window.

Complexity: The complexity of our algorithm is O(nlogn) + O(n) = O(nlogn). O(nlogn) comes from sorting which we can use a mergesort for as seen in class.
The O(n) comes from the single loop over all intervals in our sorted set of intervals. Therefore we have O(nlogn).

Correctness: We will argue correctness with the "greedy stays ahead" idea. We want to argue that the algorithm produces the minimum number of visits required
given a set of intervals A. As a "step", we can think of our window as moving to include (or not include) the next interval (let's call it t) in our list.
Therefore we can perform induction how many t's we've already gone through. The total number of visits after already deciding on t intervals can be denoted g(t) and s(t)
for G and S respectively. G is our greedy algorithm and  S is an arbitrary optimal algorithm. We want to prove for all t that g(t) <= s(t). Note, we make the assumption that
both algorithms will first sort A by increasing end time. We believe this is a valid assumption to make because this was done in the course notes in the greedy stays ahead proof
for the interval scheduling section.

Claim - g(t) <= s(t) for all t in [0, A.size - 1] (assuming valid input)

Base Case -
	t = 0, After deciding upon 0 intervals, there is no window so g(t) <= s(t) is trivially true.
    t = 1, After deciding upon 1 interval,  there is exactly 1 window so g(t) = 1. There is exactly 1 visit for S as well since S must pick a time. So g(t) <= s(t)

Induction Step -
	Assume that after t decisions on which interval to choose that g(t) <= s(t). As we are going from left to right in the sorted list in our greedy algorithm, we know that the t+1'st 
    interval will either overlap with our window causing no more visits or it will not overlap causing another visit (new window). Therefore g(t+1) will not be increased at all from g(t)
    or it will increase by 1 depending on the case. In the case that it doesn't increase, g(t+1) <= s(t+1) holds since it held after the t'th interval by our assumption.
    In the case of g(t+1) increasing by 1 from g(t), s(t+1) would also increase as there is no overlap between the t+1'st interval and another. Therefore g(t+1) <= s(t+1) again holds 
    since both increased by 1.

Code:
Input: List of intervals A
Output: Minimal visits required to attend all intervals
procedure minVisits(A[0,...,n-1]){
    visits = 0
    window = null
    if(A == null || A.size == 0) {return -1}
    else{
        mergeSort(A)                                                // Sort intervals by end time break ties by start time, O(nlogn) like in class
        for(i in range 0 to A.size - 1, i++){                       // O(n) for loop
            if(getOverlapInterval(window,A[i]) != null){
                window = getOverlapInterval(window, A[i])
            }
            else{
                window = A[i]
                visited++
            }
        }
    }
    return visits
}

procedure getOverlapInterval(Interval window, Interval b){
    // Return null if theres no overlap
    if(window == null || b == null|| (window.end <= b.start) || (window.start >= b.end) ){
        return null
    }
    else{
        new_start = max(window.start, b.start)
        new_end = min(window.end, b.end)
        return new Interval(new_start, new_end)
    }
}